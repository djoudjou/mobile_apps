// Mocks generated by Mockito 5.0.13 from annotations
// in familytrusts/test/src/application/family/trusted/trusted_form/trusted_user_form_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:familytrusts/src/domain/auth/auth_failure.dart' as _i5;
import 'package:familytrusts/src/domain/auth/user_info.dart' as _i8;
import 'package:familytrusts/src/domain/children_lookup/children_lookup.dart'
    as _i22;
import 'package:familytrusts/src/domain/family/child.dart' as _i13;
import 'package:familytrusts/src/domain/family/children_failure.dart' as _i12;
import 'package:familytrusts/src/domain/family/locations/location.dart' as _i16;
import 'package:familytrusts/src/domain/family/locations/location_failure.dart'
    as _i15;
import 'package:familytrusts/src/domain/family/trusted_user/trusted.dart'
    as _i14;
import 'package:familytrusts/src/domain/invitation/invitation.dart' as _i20;
import 'package:familytrusts/src/domain/invitation/invitation_failure.dart'
    as _i19;
import 'package:familytrusts/src/domain/notification/event.dart' as _i18;
import 'package:familytrusts/src/domain/notification/event_failure.dart'
    as _i17;
import 'package:familytrusts/src/domain/notification/notifications_failure.dart'
    as _i21;
import 'package:familytrusts/src/domain/search_user/search_user_failure.dart'
    as _i11;
import 'package:familytrusts/src/domain/user/user.dart' as _i10;
import 'package:familytrusts/src/domain/user/user_failure.dart' as _i9;
import 'package:familytrusts/src/domain/user/value_objects.dart' as _i6;
import 'package:firebase_auth/firebase_auth.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

import 'trusted_user_form_bloc_test.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeOption<A> extends _i1.Fake implements _i2.Option<A> {}

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [MockAuthFacade].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockAuthFacade extends _i1.Mock implements _i3.MockAuthFacade {
  MockMockAuthFacade() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
  @override
  _i2.Option<String> getSignedInUserId() =>
      (super.noSuchMethod(Invocation.method(#getSignedInUserId, []),
          returnValue: _FakeOption<String>()) as _i2.Option<String>);
  @override
  _i4.Future<_i2.Either<_i5.AuthFailure, String>> registerWithEmailAndPassword(
          {_i6.EmailAddress? emailAddress, _i6.Password? password}) =>
      (super.noSuchMethod(
              Invocation.method(#registerWithEmailAndPassword, [],
                  {#emailAddress: emailAddress, #password: password}),
              returnValue: Future<_i2.Either<_i5.AuthFailure, String>>.value(
                  _FakeEither<_i5.AuthFailure, String>()))
          as _i4.Future<_i2.Either<_i5.AuthFailure, String>>);
  @override
  _i4.Future<_i2.Either<_i5.AuthFailure, String>> signInWithEmailAndPassword(
          {_i6.EmailAddress? emailAddress, _i6.Password? password}) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithEmailAndPassword, [],
                  {#emailAddress: emailAddress, #password: password}),
              returnValue: Future<_i2.Either<_i5.AuthFailure, String>>.value(
                  _FakeEither<_i5.AuthFailure, String>()))
          as _i4.Future<_i2.Either<_i5.AuthFailure, String>>);
  @override
  _i4.Future<_i2.Either<_i5.AuthFailure, String>> signInWithGoogle() =>
      (super.noSuchMethod(Invocation.method(#signInWithGoogle, []),
              returnValue: Future<_i2.Either<_i5.AuthFailure, String>>.value(
                  _FakeEither<_i5.AuthFailure, String>()))
          as _i4.Future<_i2.Either<_i5.AuthFailure, String>>);
  @override
  _i4.Future<_i2.Either<_i5.AuthFailure, String>> signInWithFacebook() =>
      (super.noSuchMethod(Invocation.method(#signInWithFacebook, []),
              returnValue: Future<_i2.Either<_i5.AuthFailure, String>>.value(
                  _FakeEither<_i5.AuthFailure, String>()))
          as _i4.Future<_i2.Either<_i5.AuthFailure, String>>);
  @override
  _i4.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i2.Option<_i7.User> getSignedInUser() =>
      (super.noSuchMethod(Invocation.method(#getSignedInUser, []),
          returnValue: _FakeOption<_i7.User>()) as _i2.Option<_i7.User>);
  @override
  _i4.Future<_i2.Option<_i8.MyUserInfo>> getSignedUserInfo() =>
      (super.noSuchMethod(Invocation.method(#getSignedUserInfo, []),
              returnValue: Future<_i2.Option<_i8.MyUserInfo>>.value(
                  _FakeOption<_i8.MyUserInfo>()))
          as _i4.Future<_i2.Option<_i8.MyUserInfo>>);
}

/// A class which mocks [MockUserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockUserRepository extends _i1.Mock
    implements _i3.MockUserRepository {
  MockMockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
  @override
  _i4.Future<_i2.Either<_i9.UserFailure, _i2.Unit>> saveToken(
          String? userId, String? token) =>
      (super.noSuchMethod(Invocation.method(#saveToken, [userId, token]),
              returnValue: Future<_i2.Either<_i9.UserFailure, _i2.Unit>>.value(
                  _FakeEither<_i9.UserFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i9.UserFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i9.UserFailure, _i2.Unit>> create(_i10.User? user,
          {String? pickedFilePath}) =>
      (super.noSuchMethod(
          Invocation.method(#create, [user], {#pickedFilePath: pickedFilePath}),
          returnValue: Future<_i2.Either<_i9.UserFailure, _i2.Unit>>.value(
              _FakeEither<_i9.UserFailure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i9.UserFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i9.UserFailure, _i2.Unit>> update(_i10.User? user,
          {String? pickedFilePath}) =>
      (super.noSuchMethod(
          Invocation.method(#update, [user], {#pickedFilePath: pickedFilePath}),
          returnValue: Future<_i2.Either<_i9.UserFailure, _i2.Unit>>.value(
              _FakeEither<_i9.UserFailure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i9.UserFailure, _i2.Unit>>);
  @override
  _i4.Stream<_i2.Either<_i9.UserFailure, _i10.User>> watchUser(
          String? userId) =>
      (super.noSuchMethod(Invocation.method(#watchUser, [userId]),
              returnValue:
                  Stream<_i2.Either<_i9.UserFailure, _i10.User>>.empty())
          as _i4.Stream<_i2.Either<_i9.UserFailure, _i10.User>>);
  @override
  _i4.Future<_i2.Either<_i9.UserFailure, _i10.User>> getUser(String? id) =>
      (super.noSuchMethod(Invocation.method(#getUser, [id]),
              returnValue: Future<_i2.Either<_i9.UserFailure, _i10.User>>.value(
                  _FakeEither<_i9.UserFailure, _i10.User>()))
          as _i4.Future<_i2.Either<_i9.UserFailure, _i10.User>>);
  @override
  _i4.Future<_i2.Either<_i11.SearchUserFailure, _i4.Stream<List<_i10.User>>>> searchUsers(
          String? userLookupText,
          {List<String>? excludedUsers}) =>
      (super.noSuchMethod(
          Invocation.method(
              #searchUsers, [userLookupText], {#excludedUsers: excludedUsers}),
          returnValue:
              Future<_i2.Either<_i11.SearchUserFailure, _i4.Stream<List<_i10.User>>>>.value(
                  _FakeEither<_i11.SearchUserFailure, _i4.Stream<List<_i10.User>>>())) as _i4
          .Future<_i2.Either<_i11.SearchUserFailure, _i4.Stream<List<_i10.User>>>>);
}

/// A class which mocks [MockFamilyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockFamilyRepository extends _i1.Mock
    implements _i3.MockFamilyRepository {
  MockMockFamilyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
  @override
  _i4.Future<_i2.Either<_i12.ChildrenFailure, _i13.Child>> getChildById(
          {String? familyId, String? childId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getChildById, [], {#familyId: familyId, #childId: childId}),
              returnValue:
                  Future<_i2.Either<_i12.ChildrenFailure, _i13.Child>>.value(
                      _FakeEither<_i12.ChildrenFailure, _i13.Child>()))
          as _i4.Future<_i2.Either<_i12.ChildrenFailure, _i13.Child>>);
  @override
  _i4.Stream<_i2.Either<_i12.ChildrenFailure, List<_i2.Either<_i12.ChildrenFailure, _i13.Child>>>>
      getChildren(String? familyId) => (super.noSuchMethod(
              Invocation.method(#getChildren, [familyId]),
              returnValue:
                  Stream<_i2.Either<_i12.ChildrenFailure, List<_i2.Either<_i12.ChildrenFailure, _i13.Child>>>>.empty())
          as _i4.Stream<
              _i2.Either<_i12.ChildrenFailure,
                  List<_i2.Either<_i12.ChildrenFailure, _i13.Child>>>>);
  @override
  _i4.Future<_i2.Either<_i12.ChildrenFailure, _i2.Unit>> deleteChild(
          {String? familyId, _i13.Child? child}) =>
      (super.noSuchMethod(
          Invocation.method(
              #deleteChild, [], {#familyId: familyId, #child: child}),
          returnValue: Future<_i2.Either<_i12.ChildrenFailure, _i2.Unit>>.value(
              _FakeEither<_i12.ChildrenFailure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i12.ChildrenFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i12.ChildrenFailure, _i2.Unit>> addUpdateChild(
          {String? familyId, _i13.Child? child, String? pickedFilePath}) =>
      (super.noSuchMethod(
          Invocation.method(#addUpdateChild, [], {
            #familyId: familyId,
            #child: child,
            #pickedFilePath: pickedFilePath
          }),
          returnValue: Future<_i2.Either<_i12.ChildrenFailure, _i2.Unit>>.value(
              _FakeEither<_i12.ChildrenFailure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i12.ChildrenFailure, _i2.Unit>>);
  @override
  _i4.Stream<_i2.Either<_i9.UserFailure, List<_i14.TrustedUser>>>
      getTrustedUsers(String? familyId) => (super.noSuchMethod(
              Invocation.method(#getTrustedUsers, [familyId]),
              returnValue: Stream<
                  _i2.Either<_i9.UserFailure, List<_i14.TrustedUser>>>.empty())
          as _i4.Stream<_i2.Either<_i9.UserFailure, List<_i14.TrustedUser>>>);
  @override
  _i4.Future<_i2.Either<_i9.UserFailure, List<_i14.TrustedUser>>>
      getFutureTrustedUsers(String? familyId) => (super.noSuchMethod(
          Invocation.method(#getFutureTrustedUsers, [familyId]),
          returnValue: Future<
                  _i2.Either<_i9.UserFailure, List<_i14.TrustedUser>>>.value(
              _FakeEither<_i9.UserFailure, List<_i14.TrustedUser>>())) as _i4
          .Future<_i2.Either<_i9.UserFailure, List<_i14.TrustedUser>>>);
  @override
  _i4.Future<_i2.Either<_i9.UserFailure, _i2.Unit>> addTrustedUser(
          {String? familyId, _i14.TrustedUser? trustedUser}) =>
      (super.noSuchMethod(
              Invocation.method(#addTrustedUser, [],
                  {#familyId: familyId, #trustedUser: trustedUser}),
              returnValue: Future<_i2.Either<_i9.UserFailure, _i2.Unit>>.value(
                  _FakeEither<_i9.UserFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i9.UserFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i9.UserFailure, _i2.Unit>> deleteTrustedUser(
          {String? familyId, String? trustedUserId}) =>
      (super.noSuchMethod(
              Invocation.method(#deleteTrustedUser, [],
                  {#familyId: familyId, #trustedUserId: trustedUserId}),
              returnValue: Future<_i2.Either<_i9.UserFailure, _i2.Unit>>.value(
                  _FakeEither<_i9.UserFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i9.UserFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i15.LocationFailure, _i16.Location>> getLocationById(
          {String? familyId, String? locationId}) =>
      (super.noSuchMethod(
              Invocation.method(#getLocationById, [],
                  {#familyId: familyId, #locationId: locationId}),
              returnValue:
                  Future<_i2.Either<_i15.LocationFailure, _i16.Location>>.value(
                      _FakeEither<_i15.LocationFailure, _i16.Location>()))
          as _i4.Future<_i2.Either<_i15.LocationFailure, _i16.Location>>);
  @override
  _i4.Stream<_i2.Either<_i15.LocationFailure, List<_i2.Either<_i15.LocationFailure, _i16.Location>>>>
      getLocations(String? familyId) => (super.noSuchMethod(
              Invocation.method(#getLocations, [familyId]),
              returnValue:
                  Stream<_i2.Either<_i15.LocationFailure, List<_i2.Either<_i15.LocationFailure, _i16.Location>>>>.empty())
          as _i4.Stream<
              _i2.Either<_i15.LocationFailure,
                  List<_i2.Either<_i15.LocationFailure, _i16.Location>>>>);
  @override
  _i4.Future<_i2.Either<_i15.LocationFailure, _i2.Unit>> addUpdateLocation(
          {String? familyId,
          _i16.Location? location,
          String? pickedFilePath}) =>
      (super.noSuchMethod(
          Invocation.method(#addUpdateLocation, [], {
            #familyId: familyId,
            #location: location,
            #pickedFilePath: pickedFilePath
          }),
          returnValue: Future<_i2.Either<_i15.LocationFailure, _i2.Unit>>.value(
              _FakeEither<_i15.LocationFailure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i15.LocationFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i15.LocationFailure, _i2.Unit>> deleteLocation(
          {String? familyId, _i16.Location? location}) =>
      (super.noSuchMethod(
          Invocation.method(
              #deleteLocation, [], {#familyId: familyId, #location: location}),
          returnValue: Future<_i2.Either<_i15.LocationFailure, _i2.Unit>>.value(
              _FakeEither<_i15.LocationFailure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i15.LocationFailure, _i2.Unit>>);
}

/// A class which mocks [MockNotificationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockNotificationRepository extends _i1.Mock
    implements _i3.MockNotificationRepository {
  MockMockNotificationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
  @override
  _i4.Stream<List<_i2.Either<_i17.EventFailure, _i18.Event>>> getEvents(
          String? userId) =>
      (super.noSuchMethod(Invocation.method(#getEvents, [userId]),
              returnValue: Stream<
                  List<_i2.Either<_i17.EventFailure, _i18.Event>>>.empty())
          as _i4.Stream<List<_i2.Either<_i17.EventFailure, _i18.Event>>>);
  @override
  _i4.Stream<List<_i2.Either<_i19.InvitationFailure, _i20.Invitation>>>
      getInvitations(String? userId) => (super.noSuchMethod(
          Invocation.method(#getInvitations, [userId]),
          returnValue: Stream<
              List<
                  _i2.Either<_i19.InvitationFailure,
                      _i20.Invitation>>>.empty()) as _i4
          .Stream<List<_i2.Either<_i19.InvitationFailure, _i20.Invitation>>>);
  @override
  _i4.Stream<_i2.Either<_i21.NotificationsFailure, int>> getUnRedCount(
          String? userId) =>
      (super.noSuchMethod(Invocation.method(#getUnRedCount, [userId]),
              returnValue:
                  Stream<_i2.Either<_i21.NotificationsFailure, int>>.empty())
          as _i4.Stream<_i2.Either<_i21.NotificationsFailure, int>>);
  @override
  _i4.Future<_i2.Either<_i21.NotificationsFailure, _i2.Unit>> createEvent(
          String? userId, _i18.Event? event) =>
      (super.noSuchMethod(Invocation.method(#createEvent, [userId, event]),
              returnValue:
                  Future<_i2.Either<_i21.NotificationsFailure, _i2.Unit>>.value(
                      _FakeEither<_i21.NotificationsFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i21.NotificationsFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i21.NotificationsFailure, _i2.Unit>> updateEvent(
          String? userId, _i18.Event? event) =>
      (super.noSuchMethod(Invocation.method(#updateEvent, [userId, event]),
              returnValue:
                  Future<_i2.Either<_i21.NotificationsFailure, _i2.Unit>>.value(
                      _FakeEither<_i21.NotificationsFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i21.NotificationsFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i21.NotificationsFailure, _i2.Unit>> deleteEvent(
          String? userId, _i18.Event? event) =>
      (super.noSuchMethod(Invocation.method(#deleteEvent, [userId, event]),
              returnValue:
                  Future<_i2.Either<_i21.NotificationsFailure, _i2.Unit>>.value(
                      _FakeEither<_i21.NotificationsFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i21.NotificationsFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i21.NotificationsFailure, _i2.Unit>> createInvitation(
          _i20.Invitation? invitation) =>
      (super.noSuchMethod(Invocation.method(#createInvitation, [invitation]),
              returnValue:
                  Future<_i2.Either<_i21.NotificationsFailure, _i2.Unit>>.value(
                      _FakeEither<_i21.NotificationsFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i21.NotificationsFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i21.NotificationsFailure, _i2.Unit>> deleteInvitation(
          {_i10.User? from, _i10.User? to}) =>
      (super.noSuchMethod(
              Invocation.method(#deleteInvitation, [], {#from: from, #to: to}),
              returnValue:
                  Future<_i2.Either<_i21.NotificationsFailure, _i2.Unit>>.value(
                      _FakeEither<_i21.NotificationsFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i21.NotificationsFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i21.NotificationsFailure, _i2.Unit>>
      createEventForChildrenLookup(
              _i22.ChildrenLookup? childrenLookup, _i18.Event? event) =>
          (super.noSuchMethod(
              Invocation.method(
                  #createEventForChildrenLookup, [childrenLookup, event]),
              returnValue:
                  Future<_i2.Either<_i21.NotificationsFailure, _i2.Unit>>.value(
                      _FakeEither<_i21.NotificationsFailure, _i2.Unit>())) as _i4
              .Future<_i2.Either<_i21.NotificationsFailure, _i2.Unit>>);
}

/// A class which mocks [MockAnalyticsSvc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockAnalyticsSvc extends _i1.Mock implements _i3.MockAnalyticsSvc {
  MockMockAnalyticsSvc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
  @override
  void loginWithGoogle(String? userId) =>
      super.noSuchMethod(Invocation.method(#loginWithGoogle, [userId]),
          returnValueForMissingStub: null);
  @override
  void loginWithLoginPwd(String? userId) =>
      super.noSuchMethod(Invocation.method(#loginWithLoginPwd, [userId]),
          returnValueForMissingStub: null);
  @override
  void missingUser(String? userId) =>
      super.noSuchMethod(Invocation.method(#missingUser, [userId]),
          returnValueForMissingStub: null);
  @override
  void debug(String? msg) =>
      super.noSuchMethod(Invocation.method(#debug, [msg]),
          returnValueForMissingStub: null);
  @override
  void loginWithFacebook(String? userId) =>
      super.noSuchMethod(Invocation.method(#loginWithFacebook, [userId]),
          returnValueForMissingStub: null);
  @override
  void log(String? message,
          {DateTime? time,
          int? sequenceNumber,
          int? level = 0,
          String? name,
          _i4.Zone? zone,
          Object? error,
          StackTrace? stackTrace}) =>
      super.noSuchMethod(
          Invocation.method(#log, [
            message
          ], {
            #time: time,
            #sequenceNumber: sequenceNumber,
            #level: level,
            #name: name,
            #zone: zone,
            #error: error,
            #stackTrace: stackTrace
          }),
          returnValueForMissingStub: null);
}
