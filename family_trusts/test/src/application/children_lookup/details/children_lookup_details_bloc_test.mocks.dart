// Mocks generated by Mockito 5.2.0 from annotations
// in familytrusts/test/src/application/children_lookup/details/children_lookup_details_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:familytrusts/src/domain/auth/auth_failure.dart' as _i5;
import 'package:familytrusts/src/domain/auth/user_info.dart' as _i8;
import 'package:familytrusts/src/domain/children_lookup/children_lookup.dart'
    as _i13;
import 'package:familytrusts/src/domain/children_lookup/children_lookup_details.dart'
    as _i15;
import 'package:familytrusts/src/domain/children_lookup/children_lookup_failure.dart'
    as _i12;
import 'package:familytrusts/src/domain/children_lookup/children_lookup_history.dart'
    as _i14;
import 'package:familytrusts/src/domain/notification/event.dart' as _i19;
import 'package:familytrusts/src/domain/notification/event_failure.dart'
    as _i18;
import 'package:familytrusts/src/domain/notification/notifications_failure.dart'
    as _i20;
import 'package:familytrusts/src/domain/planning/planning.dart' as _i17;
import 'package:familytrusts/src/domain/planning/planning_failure.dart' as _i16;
import 'package:familytrusts/src/domain/search_user/search_user_failure.dart'
    as _i11;
import 'package:familytrusts/src/domain/user/user.dart' as _i10;
import 'package:familytrusts/src/domain/user/user_failure.dart' as _i9;
import 'package:familytrusts/src/domain/user/value_objects.dart' as _i6;
import 'package:firebase_auth/firebase_auth.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

import 'children_lookup_details_bloc_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeOption_0<A> extends _i1.Fake implements _i2.Option<A> {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [MockAuthFacade].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockAuthFacade extends _i1.Mock implements _i3.MockAuthFacade {
  MockMockAuthFacade() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Option<String> getSignedInUserId() =>
      (super.noSuchMethod(Invocation.method(#getSignedInUserId, []),
          returnValue: _FakeOption_0<String>()) as _i2.Option<String>);
  @override
  _i4.Future<_i2.Either<_i5.AuthFailure, String>> registerWithEmailAndPassword(
          {_i6.EmailAddress? emailAddress, _i6.Password? password}) =>
      (super.noSuchMethod(
              Invocation.method(#registerWithEmailAndPassword, [],
                  {#emailAddress: emailAddress, #password: password}),
              returnValue: Future<_i2.Either<_i5.AuthFailure, String>>.value(
                  _FakeEither_1<_i5.AuthFailure, String>()))
          as _i4.Future<_i2.Either<_i5.AuthFailure, String>>);
  @override
  _i4.Future<_i2.Either<_i5.AuthFailure, String>> signInWithEmailAndPassword(
          {_i6.EmailAddress? emailAddress, _i6.Password? password}) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithEmailAndPassword, [],
                  {#emailAddress: emailAddress, #password: password}),
              returnValue: Future<_i2.Either<_i5.AuthFailure, String>>.value(
                  _FakeEither_1<_i5.AuthFailure, String>()))
          as _i4.Future<_i2.Either<_i5.AuthFailure, String>>);
  @override
  _i4.Future<_i2.Either<_i5.AuthFailure, String>> signInWithGoogle() =>
      (super.noSuchMethod(Invocation.method(#signInWithGoogle, []),
              returnValue: Future<_i2.Either<_i5.AuthFailure, String>>.value(
                  _FakeEither_1<_i5.AuthFailure, String>()))
          as _i4.Future<_i2.Either<_i5.AuthFailure, String>>);
  @override
  _i4.Future<_i2.Either<_i5.AuthFailure, String>> signInWithFacebook() =>
      (super.noSuchMethod(Invocation.method(#signInWithFacebook, []),
              returnValue: Future<_i2.Either<_i5.AuthFailure, String>>.value(
                  _FakeEither_1<_i5.AuthFailure, String>()))
          as _i4.Future<_i2.Either<_i5.AuthFailure, String>>);
  @override
  _i4.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i2.Option<_i7.User> getSignedInUser() =>
      (super.noSuchMethod(Invocation.method(#getSignedInUser, []),
          returnValue: _FakeOption_0<_i7.User>()) as _i2.Option<_i7.User>);
  @override
  _i4.Future<_i2.Option<_i8.MyUserInfo>> getSignedUserInfo() =>
      (super.noSuchMethod(Invocation.method(#getSignedUserInfo, []),
              returnValue: Future<_i2.Option<_i8.MyUserInfo>>.value(
                  _FakeOption_0<_i8.MyUserInfo>()))
          as _i4.Future<_i2.Option<_i8.MyUserInfo>>);
  @override
  _i4.Future<String> getToken() =>
      (super.noSuchMethod(Invocation.method(#getToken, []),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
}

/// A class which mocks [MockUserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockUserRepository extends _i1.Mock
    implements _i3.MockUserRepository {
  MockMockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i9.UserFailure, _i2.Unit>> saveToken(
          String? userId, String? token) =>
      (super.noSuchMethod(Invocation.method(#saveToken, [userId, token]),
              returnValue: Future<_i2.Either<_i9.UserFailure, _i2.Unit>>.value(
                  _FakeEither_1<_i9.UserFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i9.UserFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i9.UserFailure, _i2.Unit>> create(_i10.User? user,
          {String? pickedFilePath}) =>
      (super.noSuchMethod(
          Invocation.method(#create, [user], {#pickedFilePath: pickedFilePath}),
          returnValue: Future<_i2.Either<_i9.UserFailure, _i2.Unit>>.value(
              _FakeEither_1<_i9.UserFailure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i9.UserFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i9.UserFailure, _i2.Unit>> update(_i10.User? user,
          {String? pickedFilePath}) =>
      (super.noSuchMethod(
          Invocation.method(#update, [user], {#pickedFilePath: pickedFilePath}),
          returnValue: Future<_i2.Either<_i9.UserFailure, _i2.Unit>>.value(
              _FakeEither_1<_i9.UserFailure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i9.UserFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i9.UserFailure, _i10.User>> getUser(String? id) =>
      (super.noSuchMethod(Invocation.method(#getUser, [id]),
              returnValue: Future<_i2.Either<_i9.UserFailure, _i10.User>>.value(
                  _FakeEither_1<_i9.UserFailure, _i10.User>()))
          as _i4.Future<_i2.Either<_i9.UserFailure, _i10.User>>);
  @override
  _i4.Future<_i2.Either<_i11.SearchUserFailure, List<_i10.User>>> searchUsers(
          String? userLookupText,
          {List<String>? excludedUsers}) =>
      (super.noSuchMethod(
          Invocation.method(
              #searchUsers, [userLookupText], {#excludedUsers: excludedUsers}),
          returnValue:
              Future<_i2.Either<_i11.SearchUserFailure, List<_i10.User>>>.value(
                  _FakeEither_1<_i11.SearchUserFailure, List<_i10.User>>())) as _i4
          .Future<_i2.Either<_i11.SearchUserFailure, List<_i10.User>>>);
}

/// A class which mocks [MockChildrenLookupRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockChildrenLookupRepository extends _i1.Mock
    implements _i3.MockChildrenLookupRepository {
  MockMockChildrenLookupRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i12.ChildrenLookupFailure, List<_i13.ChildrenLookup>>>
      getPassedChildrenLookupsByFamilyId({String? familyId}) => (super.noSuchMethod(
          Invocation.method(
              #getPassedChildrenLookupsByFamilyId, [], {#familyId: familyId}),
          returnValue:
              Future<_i2.Either<_i12.ChildrenLookupFailure, List<_i13.ChildrenLookup>>>.value(
                  _FakeEither_1<_i12.ChildrenLookupFailure, List<_i13.ChildrenLookup>>())) as _i4
          .Future<_i2.Either<_i12.ChildrenLookupFailure, List<_i13.ChildrenLookup>>>);
  @override
  _i4.Future<_i2.Either<_i12.ChildrenLookupFailure, List<_i13.ChildrenLookup>>>
      getInProgressChildrenLookupsByFamilyId({String? familyId}) => (super.noSuchMethod(
          Invocation.method(#getInProgressChildrenLookupsByFamilyId, [],
              {#familyId: familyId}),
          returnValue: Future<_i2.Either<_i12.ChildrenLookupFailure, List<_i13.ChildrenLookup>>>.value(
              _FakeEither_1<_i12.ChildrenLookupFailure, List<_i13.ChildrenLookup>>())) as _i4
          .Future<_i2.Either<_i12.ChildrenLookupFailure, List<_i13.ChildrenLookup>>>);
  @override
  _i4.Future<_i2.Either<_i12.ChildrenLookupFailure, List<_i14.ChildrenLookupHistory>>>
      getChildrenLookupHistories({String? childrenLookupId}) => (super.noSuchMethod(
              Invocation.method(#getChildrenLookupHistories, [],
                  {#childrenLookupId: childrenLookupId}),
              returnValue: Future<_i2.Either<_i12.ChildrenLookupFailure, List<_i14.ChildrenLookupHistory>>>.value(
                  _FakeEither_1<_i12.ChildrenLookupFailure, List<_i14.ChildrenLookupHistory>>()))
          as _i4.Future<_i2.Either<_i12.ChildrenLookupFailure, List<_i14.ChildrenLookupHistory>>>);
  @override
  _i4.Future<_i2.Either<_i12.ChildrenLookupFailure, _i15.ChildrenLookupDetails>>
      findChildrenLookupDetailsById({String? childrenLookupId}) => (super.noSuchMethod(
          Invocation.method(#findChildrenLookupDetailsById, [],
              {#childrenLookupId: childrenLookupId}),
          returnValue: Future<_i2.Either<_i12.ChildrenLookupFailure, _i15.ChildrenLookupDetails>>.value(
              _FakeEither_1<_i12.ChildrenLookupFailure, _i15.ChildrenLookupDetails>())) as _i4
          .Future<_i2.Either<_i12.ChildrenLookupFailure, _i15.ChildrenLookupDetails>>);
  @override
  _i4.Future<
      _i2.Either<_i12.ChildrenLookupFailure, _i2.Unit>> createChildrenLookup(
          {_i13.ChildrenLookup? childrenLookup}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createChildrenLookup, [], {#childrenLookup: childrenLookup}),
              returnValue:
                  Future<_i2.Either<_i12.ChildrenLookupFailure, _i2.Unit>>.value(
                      _FakeEither_1<_i12.ChildrenLookupFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i12.ChildrenLookupFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i16.PlanningFailure, _i17.Planning>> getPlanning(
          {String? userId}) =>
      (super.noSuchMethod(
              Invocation.method(#getPlanning, [], {#userId: userId}),
              returnValue:
                  Future<_i2.Either<_i16.PlanningFailure, _i17.Planning>>.value(
                      _FakeEither_1<_i16.PlanningFailure, _i17.Planning>()))
          as _i4.Future<_i2.Either<_i16.PlanningFailure, _i17.Planning>>);
  @override
  _i4.Future<_i2.Either<_i12.ChildrenLookupFailure, _i2.Unit>> cancel(
          {_i13.ChildrenLookup? childrenLookup, _i10.User? connectedUser}) =>
      (super.noSuchMethod(
          Invocation.method(#cancel, [],
              {#childrenLookup: childrenLookup, #connectedUser: connectedUser}),
          returnValue:
              Future<_i2.Either<_i12.ChildrenLookupFailure, _i2.Unit>>.value(
                  _FakeEither_1<_i12.ChildrenLookupFailure, _i2.Unit>())) as _i4
          .Future<_i2.Either<_i12.ChildrenLookupFailure, _i2.Unit>>);
}

/// A class which mocks [MockNotificationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockNotificationRepository extends _i1.Mock
    implements _i3.MockNotificationRepository {
  MockMockNotificationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i18.EventFailure, List<_i19.Event>>> getEvents(
          String? userId) =>
      (super.noSuchMethod(Invocation.method(#getEvents, [userId]),
              returnValue:
                  Future<_i2.Either<_i18.EventFailure, List<_i19.Event>>>.value(
                      _FakeEither_1<_i18.EventFailure, List<_i19.Event>>()))
          as _i4.Future<_i2.Either<_i18.EventFailure, List<_i19.Event>>>);
  @override
  _i4.Future<_i2.Either<_i20.NotificationsFailure, int>> getUnReadCount(
          String? userId) =>
      (super.noSuchMethod(Invocation.method(#getUnReadCount, [userId]),
          returnValue: Future<_i2.Either<_i20.NotificationsFailure, int>>.value(
              _FakeEither_1<_i20.NotificationsFailure, int>())) as _i4
          .Future<_i2.Either<_i20.NotificationsFailure, int>>);
  @override
  _i4.Future<_i2.Either<_i20.NotificationsFailure, _i2.Unit>> deleteEvent(
          String? userId, _i19.Event? event) =>
      (super.noSuchMethod(Invocation.method(#deleteEvent, [userId, event]),
              returnValue:
                  Future<_i2.Either<_i20.NotificationsFailure, _i2.Unit>>.value(
                      _FakeEither_1<_i20.NotificationsFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i20.NotificationsFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i20.NotificationsFailure, _i2.Unit>> markAsReadEvent(
          String? userId, _i19.Event? event) =>
      (super.noSuchMethod(Invocation.method(#markAsReadEvent, [userId, event]),
              returnValue:
                  Future<_i2.Either<_i20.NotificationsFailure, _i2.Unit>>.value(
                      _FakeEither_1<_i20.NotificationsFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i20.NotificationsFailure, _i2.Unit>>);
}
